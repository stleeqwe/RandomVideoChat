import Foundation
import Firebase
import FirebaseAuth
import FirebaseFirestore
import FirebaseDatabase

class UserManager: ObservableObject {
    static let shared = UserManager()
    private let db = Firestore.firestore()
    
    @Published var currentUser: User?
    private var recentMatches: Set<String> = []  // ÏÑ∏ÏÖò ÎèôÏïà Îß§Ïπ≠Îêú ÏÇ¨Ïö©Ïûê ID
    
    private init() {
        loadCurrentUserIfNeeded()
    }
    
    // MARK: - User Management
    func loadCurrentUserIfNeeded() {
        if let uid = Auth.auth().currentUser?.uid {
            loadCurrentUser(uid: uid)
        }
    }
    
    func loadCurrentUser(uid: String) {
        db.collection("users").document(uid).getDocument { [weak self] document, error in
            if let document = document, document.exists {
                let data = document.data() ?? [:]
                let heartCount = data["heartCount"] as? Int ?? 3
                let blockedUsers = data["blockedUsers"] as? [String] ?? []
                let email = data["email"] as? String
                let displayName = data["displayName"] as? String
                
                // User ÏÉùÏÑ± - UserÏùò Ïã§Ï†ú Ï¥àÍ∏∞Ìôî Ìï®ÏàòÏóê ÎßûÍ≤å
                var user = User(uid: uid, email: email, displayName: displayName)
                user.heartCount = heartCount
                user.blockedUsers = blockedUsers
                self?.currentUser = user
                
                print("‚úÖ ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏôÑÎ£å: \(heartCount) ÌïòÌä∏")
            } else {
                // ÏÇ¨Ïö©Ïûê Î¨∏ÏÑúÍ∞Ä ÏóÜÏúºÎ©¥ ÏÉùÏÑ±
                self?.createUserDocument(uid: uid)
            }
        }
    }
    
    func createUserDocument(uid: String) {
        let userData: [String: Any] = [
            "uid": uid,
            "heartCount": 3,
            "blockedUsers": [],
            "createdAt": Timestamp(date: Date())
        ]
        
        db.collection("users").document(uid).setData(userData) { [weak self] error in
            if error == nil {
                let user = User(uid: uid) // UserÏùò Ï¥àÍ∏∞Ìôî Ìï®ÏàòÎäî Í∏∞Î≥∏Í∞íÏùÑ ÏûêÎèô ÏÑ§Ï†ï
                self?.currentUser = user
                print("‚úÖ ÏÉà ÏÇ¨Ïö©Ïûê Î¨∏ÏÑú ÏÉùÏÑ± ÏôÑÎ£å")
            } else {
                print("‚ùå ÏÇ¨Ïö©Ïûê Î¨∏ÏÑú ÏÉùÏÑ± Ïã§Ìå®: \(error?.localizedDescription ?? "")")
            }
        }
    }
    
    // MARK: - Heart Management
    func updateHeartCount(uid: String, newCount: Int) {
        db.collection("users").document(uid).updateData([
            "heartCount": newCount
        ]) { error in
            if let error = error {
                print("‚ùå ÌïòÌä∏ ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®: \(error)")
            } else {
                print("‚úÖ ÌïòÌä∏ ÏóÖÎç∞Ïù¥Ìä∏ ÏÑ±Í≥µ: \(newCount)Í∞ú")
                self.currentUser?.heartCount = newCount
            }
        }
    }
    
    // MARK: - ÌïòÌä∏ Ï†ÑÏÜ° Í∞úÏÑ†
    // UserManager.swift
    func sendHeartToOpponent(_ opponentId: String) {
        let ref = Database.database().reference()
            .child("notifications")
            .child(opponentId)
            .child("newHeart")
            .childByAutoId()

        ref.setValue([
            "timestamp": ServerValue.timestamp(),
            "from": Auth.auth().currentUser?.uid ?? "unknown"
        ]) { error, _ in
            if let error = error {
                print("‚ùå ÌïòÌä∏ ÏïåÎ¶º Ï†ÑÏÜ° Ïã§Ìå®: \(error)")
            } else {
                print("‚úÖ ÌïòÌä∏ ÏïåÎ¶º Ï†ÑÏÜ° ÏÑ±Í≥µ (ÏÉÅÎåÄÎ∞©: \(opponentId))")
            }
        }
    }

    
    // ÏÇ¨Ïö©Ïûê Î¨∏ÏÑúÍ∞Ä ÏóÜÏùÑ Îïå ÏÉùÏÑ±ÌïòÍ≥† ÌïòÌä∏ Ï†ÑÏÜ°
    private func createUserAndSendHeart(_ opponentId: String) {
        print("‚ö†Ô∏è ÏÉÅÎåÄÎ∞© Î¨∏ÏÑúÍ∞Ä ÏóÜÏùå. ÏÉàÎ°ú ÏÉùÏÑ±")
        
        let newData: [String: Any] = [
            "uid": opponentId,
            "heartCount": 4,  // Í∏∞Î≥∏ 3 + Î∞õÏùÄ 1
            "blockedUsers": [],
            "createdAt": Timestamp(date: Date()),
            "lastHeartReceivedAt": Timestamp(date: Date())
        ]
        
        db.collection("users").document(opponentId).setData(newData) { error in
            if error == nil {
                print("‚úÖ ÏÉà ÏÇ¨Ïö©Ïûê Î¨∏ÏÑú ÏÉùÏÑ± Î∞è ÌïòÌä∏ Ï†ÑÏÜ° ÏÑ±Í≥µ")
            } else {
                print("‚ùå ÏÉà ÏÇ¨Ïö©Ïûê ÏÉùÏÑ± Ïã§Ìå®: \(error?.localizedDescription ?? "")")
            }
        }
    }
    
    // ÌïòÌä∏ ÏïåÎ¶º Ìä∏Î¶¨Í±∞ (FirebaseÏóê ÏïåÎ¶º ÌîåÎûòÍ∑∏ ÏÑ§Ï†ï)
    private func triggerHeartNotification(to userId: String) {
        // Firebase Realtime DatabaseÏóê ÏïåÎ¶º ÌîåÎûòÍ∑∏ ÏÑ§Ï†ï
        Database.database().reference()
            .child("notifications")
            .child(userId)
            .child("newHeart")
            .setValue([
                "timestamp": ServerValue.timestamp(),
                "from": Auth.auth().currentUser?.uid ?? "unknown"
            ])
        
        print("üîî ÌïòÌä∏ ÏïåÎ¶º Ìä∏Î¶¨Í±∞ ÏôÑÎ£å")
    }
    
    // MARK: - ÌïòÌä∏ Í∞úÏàò Ïã§ÏãúÍ∞Ñ Í¥ÄÏ∞∞
    func observeUserHearts(uid: String, completion: @escaping (Int) -> Void) {
        db.collection("users").document(uid)
            .addSnapshotListener { documentSnapshot, error in
                guard let document = documentSnapshot,
                      let data = document.data(),
                      let heartCount = data["heartCount"] as? Int else {
                    print("‚ùå ÌïòÌä∏ Í¥ÄÏ∞∞ ÏóêÎü¨: \(error?.localizedDescription ?? "")")
                    return
                }
                
                completion(heartCount)
                print("üëÄ ÌïòÌä∏ Í∞úÏàò Ïã§ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏: \(heartCount)")
            }
    }
    
    // MARK: - Block Management
    func blockUser(_ userId: String) {
        guard let currentUid = Auth.auth().currentUser?.uid else { return }
        
        // FirestoreÏóê Ï∞®Îã® Ï†ïÎ≥¥ Ï†ÄÏû•
        db.collection("users").document(currentUid).updateData([
            "blockedUsers": FieldValue.arrayUnion([userId])
        ]) { error in
            if error == nil {
                self.currentUser?.blockedUsers.append(userId)
                print("‚úÖ ÏÇ¨Ïö©Ïûê Ï∞®Îã® ÏôÑÎ£å: \(userId)")
            } else {
                print("‚ùå ÏÇ¨Ïö©Ïûê Ï∞®Îã® Ïã§Ìå®: \(error?.localizedDescription ?? "")")
            }
        }
    }
    
    func unblockUser(_ userId: String) {
        guard let currentUid = Auth.auth().currentUser?.uid else { return }
        
        db.collection("users").document(currentUid).updateData([
            "blockedUsers": FieldValue.arrayRemove([userId])
        ]) { error in
            if error == nil {
                self.currentUser?.blockedUsers.removeAll { $0 == userId }
                print("‚úÖ ÏÇ¨Ïö©Ïûê Ï∞®Îã® Ìï¥Ï†ú: \(userId)")
            } else {
                print("‚ùå Ï∞®Îã® Ìï¥Ï†ú Ïã§Ìå®: \(error?.localizedDescription ?? "")")
            }
        }
    }
    
    func isUserBlocked(_ userId: String) -> Bool {
        return currentUser?.blockedUsers.contains(userId) ?? false
    }
    
    // MARK: - Matching Validation
    func canMatchWith(_ userId: String) -> Bool {
        // 1. ÏûêÍ∏∞ ÏûêÏã†Í≥ºÎäî Îß§Ïπ≠ Î∂àÍ∞Ä
        if userId == Auth.auth().currentUser?.uid {
            print("‚ùå ÏûêÍ∏∞ ÏûêÏã†Í≥ºÎäî Îß§Ïπ≠ Î∂àÍ∞Ä")
            return false
        }
        
        // 2. Ï∞®Îã®Îêú ÏÇ¨Ïö©ÏûêÏôÄÎäî Îß§Ïπ≠ Î∂àÍ∞Ä
        if isUserBlocked(userId) {
            print("‚ùå Ï∞®Îã®Îêú ÏÇ¨Ïö©ÏûêÏôÄÎäî Îß§Ïπ≠ Î∂àÍ∞Ä: \(userId)")
            return false
        }
        
        // 3. ÏµúÍ∑º Îß§Ïπ≠Ìïú ÏÇ¨Ïö©ÏûêÏôÄÎäî Îß§Ïπ≠ Î∂àÍ∞Ä (ÏÑ∏ÏÖò Í∏∞Î∞ò)
        if hasRecentlyMatched(userId) {
            print("‚ùå ÏµúÍ∑º Îß§Ïπ≠Ìïú ÏÇ¨Ïö©ÏûêÏôÄÎäî Îß§Ïπ≠ Î∂àÍ∞Ä: \(userId)")
            return false
        }
        
        print("‚úÖ Îß§Ïπ≠ Í∞ÄÎä•Ìïú ÏÇ¨Ïö©Ïûê: \(userId)")
        return true
    }
    
    // MARK: - Recent Matches (Session-based)
    func addRecentMatch(_ userId: String) {
        recentMatches.insert(userId)
        print("üìù ÏÑ∏ÏÖò Îß§Ïπ≠ Í∏∞Î°ù Ï∂îÍ∞Ä: \(userId)")
        print("üìä ÌòÑÏû¨ ÏÑ∏ÏÖò Îß§Ïπ≠ Í∏∞Î°ù: \(recentMatches.count)Î™Ö")
        
        // ÏµúÍ∑º 5Î™ÖÎßå Ïú†ÏßÄ (Î©îÎ™®Î¶¨ Í¥ÄÎ¶¨)
        if recentMatches.count > 5 {
            // SetÏùÄ ÏàúÏÑúÍ∞Ä ÏóÜÏúºÎØÄÎ°ú Î∞∞Ïó¥Î°ú Î≥ÄÌôò ÌõÑ Ï≤òÎ¶¨
            let sortedMatches = Array(recentMatches)
            if sortedMatches.count > 5 {
                recentMatches = Set(sortedMatches.suffix(5))
            }
        }
    }
    
    func hasRecentlyMatched(_ userId: String) -> Bool {
        return recentMatches.contains(userId)
    }
    
    func clearRecentMatches() {
        recentMatches.removeAll()
        print("üßπ ÏÑ∏ÏÖò Îß§Ïπ≠ Í∏∞Î°ù Ï¥àÍ∏∞Ìôî")
    }
    
    // ÏÑ∏ÏÖò Îß§Ïπ≠ Í∏∞Î°ù Í∞úÏàò Î∞òÌôò (MainView ÎîîÎ≤ÑÍ∑∏Ïö©)
    func getRecentMatchesCount() -> Int {
        return recentMatches.count
    }
    
    // MARK: - User Stats
    func getUserStats(completion: @escaping (Int, Int) -> Void) {
        guard let uid = Auth.auth().currentUser?.uid else {
            completion(0, 0)
            return
        }
        
        db.collection("users").document(uid).getDocument { document, error in
            if let data = document?.data() {
                let totalMatches = data["totalMatches"] as? Int ?? 0
                let totalHeartsSent = data["totalHeartsSent"] as? Int ?? 0
                completion(totalMatches, totalHeartsSent)
            } else {
                completion(0, 0)
            }
        }
    }
    
    func incrementMatchCount() {
        guard let uid = Auth.auth().currentUser?.uid else { return }
        
        db.collection("users").document(uid).updateData([
            "totalMatches": FieldValue.increment(Int64(1)),
            "lastMatchAt": Timestamp(date: Date())
        ]) { error in
            if error == nil {
                print("‚úÖ Îß§Ïπ≠ ÌöüÏàò Ï¶ùÍ∞Ä")
            }
        }
    }
    
}
